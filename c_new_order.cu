#include <stdio.h>  
#include <string.h>  
#include <stdlib.h>

#define NO_MAX_SIZE	30000 
#define NO_MAX_LENGTH 20

#include "tpcc_table.h"


int get_new_order(struct new_order *p_new_order_arr){ //??????????????????????????
	char file_name[] = "./csv/c_new_order.csv";  //?????????????????????????????????
    FILE *fp;  
    fp = fopen(file_name, "r");  
      
    if (!fp) {  
        fprintf(stderr, "failed to open file for reading\n");  
        return -1;  
    }
    
    char c;
    int i=0;
    int index=0;
    
    char **record_arr;
    record_arr=(char **)malloc(NO_MAX_SIZE*sizeof(char *));
    record_arr[index]=(char *)malloc(NO_MAX_LENGTH*sizeof(char));
    
    while(1){
      c=fgetc(fp);
      if(c==EOF){
        break;
      }
      if(c=='\n'){
        record_arr[index][i++]='\0';
        index++;
        record_arr[index]=(char *)malloc(NO_MAX_LENGTH*sizeof(char));
        i=0;
      }else{
        if(c!='"'){
          record_arr[index][i++]=c;
        }
      }
    }

//    *p_new_order_arr=(struct new_order *)malloc((index-1)*sizeof(struct new_order));//?????????????????????????????????
    
    for(i=1;i<index;i++){
      //printf("%s\n",record_arr[i]);
      char *token;
      
      token=strtok(record_arr[i],",");
      (p_new_order_arr)[i-1].NO_O_ID=atol(token);//?????????????????????????????????
      
      token=strtok(NULL, ",");
      (p_new_order_arr)[i-1].NO_D_ID=atol(token);//?????????????????????????????????
      
      token=strtok(NULL, ",");
      (p_new_order_arr)[i-1].NO_W_ID=atol(token);//?????????????????????????????????
      
      token=strtok(NULL, ",");
      
	free(record_arr[i-1]);
      //printf("!!!!!!!!!!!!!!!!\n%ld\n%s\n%s\n%s\n%s\n%s\n%s\n%lf\n%lf\n",new_order_arr[i].W_ID,new_order_arr[i].W_NAME,
	  //		new_order_arr[i].W_STREET_1,new_order_arr[i].W_STREET_2,new_order_arr[i].W_CITY,new_order_arr[i].W_STATE,
	  //		new_order_arr[i].W_ZIP,new_order_arr[i].W_TAX,new_order_arr[i].W_YTD);
    }
     free(record_arr);
    fclose (fp);  
    
    return index-1;
}
/*
int main(int argc, const char * argv[]) {  
    
    struct new_order *new_order_arr;//?????????????????????????????????
    int index=get_new_order(&new_order_arr);//?????????????????????????????????
    int i;
    for(i=1;i<index;i++){ //?????????????????????????????????
		printf("!!!!!!!!!!!!!!!!\n%ld\n %ld\n %ld\n",
          new_order_arr[i].NO_O_ID,
          new_order_arr[i].NO_D_ID,
          new_order_arr[i].NO_W_ID
        );
	}
      
    return 0;  
}  */
